% Termination TCC generated (at line 11, column 23) for  insert(x, tl)
  % unfinished
insert_TCC1: OBLIGATION
  FORALL (x: nat, l: list[nat], h: nat, tl: list[nat]):
    NOT x <= h AND l = cons(h, tl) IMPLIES length[nat](tl) < length[nat](l);

% Subtype TCC generated (at line 18, column 16) for  lc`1
    % expected type  (cons?[nat])
  % unfinished
cinsert_TCC1: OBLIGATION
  FORALL (lc: [list[nat], nat]): NOT null?(lc`1) IMPLIES cons?[nat](lc`1);

% Termination TCC generated (at line 19, column 18) for
    % cinsert(x, (cdr(lc`1), lc`2))
  % unfinished
cinsert_TCC2: OBLIGATION
  FORALL (x: nat, lc: [list[nat], nat]):
    NOT x <= car(lc`1) AND NOT null?(lc`1) IMPLIES
     length[nat](cdr[nat](lc`1)) < length[nat](lc`1);

% The subtype TCC (at line 20, column 11) in decl cinsert for  lc`1
    % expected type  <#store-print-type (cons?[nat])>
  % is subsumed by cinsert_TCC1

% The subtype TCC (at line 19, column 33) in decl cinsert for  lc`1
    % expected type  <#store-print-type (cons?[nat])>
  % is subsumed by cinsert_TCC1

% Termination TCC generated (at line 40, column 27) for  insertion_sort(tl)
  % unfinished
insertion_sort_TCC1: OBLIGATION
  FORALL (l: list[nat], h: nat, tl: list[nat]):
    l = cons(h, tl) IMPLIES length[nat](tl) < length[nat](l);

% Subtype TCC generated (at line 46, column 20) for  l
    % expected type  (cons?[nat])
  % unfinished
cinsertion_sort_TCC1: OBLIGATION
  FORALL (l: list[nat]): NOT null?(l) IMPLIES cons?[nat](l);

% Termination TCC generated (at line 46, column 24) for
    % cinsertion_sort(cdr(l))
  % unfinished
cinsertion_sort_TCC2: OBLIGATION
  FORALL (l: list[nat]):
    NOT null?(l) IMPLIES length[nat](cdr[nat](l)) < length[nat](l);

% The subtype TCC (at line 46, column 44) in decl cinsertion_sort for  l
    % expected type  <#store-print-type (cons?[nat])>
  % is subsumed by cinsertion_sort_TCC1

% Subtype TCC generated (at line 59, column 77) for  2
    % expected type  {i: int | length(l) /= 0 OR i >= 0}
  % unfinished
insertion_sort_is_quadratic_TCC1: OBLIGATION
  FORALL (l: list[nat]): length[nat](l) /= 0 OR 2 >= 0;