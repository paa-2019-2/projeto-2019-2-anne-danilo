(bubblesort_complexity
 (bubbling_count_bubbling_equiv_TCC1 0
  (bubbling_count_bubbling_equiv_TCC1-1 nil 3783849963
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bubbling_count_bubbling_equiv 0
  (bubbling_count_bubbling_equiv-1 nil 3783849977
   ("" (induct "l")
    (("1" (grind) nil nil) ("2" (skeep) (("2" (postpone) nil nil)) nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (bubbling_count_bubbling_equiv_2_TCC1 0
  (bubbling_count_bubbling_equiv_2_TCC1-1 nil 3783854144
   ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_count_bubbling_equiv_2_TCC2 0
  (bubbling_count_bubbling_equiv_2_TCC2-1 nil 3783854144
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_count_bubblesort_equiv 0
  (bubblesort_count_bubblesort_equiv-2 "" 3783359156
   ("" (measure-induct "length(l)" ("l"))
    (("" (skeep)
      (("" (expand "bubblesort" 1)
        (("" (expand "count_bubblesort" 1)
          (("" (lift-if)
            (("" (prop)
              (("" (expand "count_bubblesort_aux" 2)
                (("" (expand "bubblesort_aux" 2)
                  (("" (lift-if)
                    (("" (prop)
                      (("" (expand "list2finseq" 2)
                        (("" (expand "list2finseq" 1)
                          ((""
                            (lemma
                             "bubblesort_aux_count_bubblesort_aux_equiv_2")
                            (("" (inst?)
                              ((""
                                (inst?)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma
                                     "bubbling_count_bubbling_equiv_2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1" (replaces -1) nil nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "list2finseq")
                                  (("2" (postpone) nil nil))
                                  nil)
                                 ("3" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (bubblesort_count_bubblesort_equiv-1 nil 3782497570
   ("" (induct "l")
    (("1" (expand "bubblesort")
      (("1" (expand "count_bubblesort") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (expand "bubblesort")
        (("2" (expand "count_bubblesort")
          (("2" (expand "list2finseq")
            (("2" (lift-if)
              (("2" (prop)
                (("1" (postpone) nil nil)
                 ("2" (expand "bubblesort_aux")
                  (("2" (expand "count_bubblesort_aux")
                    (("2" (expand "bubbling" 2)
                      (("2" (expand "count_bubbling" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (postpone) nil nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil)
                             ("4" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (count_bubble_sort_ws_general 0
  (count_bubble_sort_ws_general-1 nil 3782849339
   ("" (induct "l")
    (("1" (expand "count_bubblesort")
      (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skeep) (("2" (postpone) nil nil)) nil))
    nil)
   nil shostak))
 (bubble_sort_is_quadratic_TCC1 0
  (bubble_sort_is_quadratic_TCC1-1 nil 3781735802
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (bubble_sort_is_quadratic 0
  (bubble_sort_is_quadratic-1 nil 3781735804
   ("" (skeep)
    (("" (expand "member")
      (("" (expand "Omicron")
        (("" (inst 1 "1/2" "0")
          (("" (skeep)
            (("" (lemma "count_bubble_sort_ws_general")
              (("" (inst?)
                (("" (assert)
                  (("" (lemma "le_cut")
                    ((""
                      (inst -1 "count_bubblesort(l)`2"
                       "(length(l) * length(l) - length(l)) / 2"
                       "1/2 * length(l) ^ 2")
                      (("" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_exp application-judgement "nat" exponentiation nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (le_cut formula-decl nil extra_real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (count_bubblesort const-decl "[list[nat], nat]" bubblesort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (count_bubble_sort_ws_general formula-decl nil
     bubblesort_complexity nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (member const-decl "bool" sets nil))
   shostak)))

